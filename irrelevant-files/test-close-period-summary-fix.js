// Test script to verify close period summary fix
const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function testClosePeriodSummaryFix() {
  console.log('üß™ Testing Close Period Summary Cash Allocation Fix...\n');

  try {
    // Find a test group with existing data
    const group = await prisma.group.findFirst({
      where: { name: 'sa' },
      include: {
        memberships: {
          include: {
            member: true
          }
        }
      }
    });

    if (!group) {
      console.log('‚ùå Test group not found');
      return;
    }

    console.log(`üìä Testing with Group: ${group.name}`);
    console.log(`üí∞ Initial Cash in Hand: ‚Çπ${group.cashInHand || 0}`);
    console.log(`üè¶ Initial Cash in Bank: ‚Çπ${group.balanceInBank || 0}`);

    // Simulate member contribution data (like what would be in the Close Period modal)
    const mockMemberContributions = group.memberships.map(membership => ({
      memberId: membership.memberId,
      memberName: membership.member.name,
      paidAmount: 100, // Each member paid ‚Çπ100
      remainingAmount: 0,
      expectedInterest: 5, // Each member has ‚Çπ5 interest
      currentLoanBalance: membership.currentLoanAmount || 0
    }));

    const totalCollected = mockMemberContributions.reduce((sum, member) => sum + member.paidAmount, 0);
    const totalRemaining = mockMemberContributions.reduce((sum, member) => sum + member.remainingAmount, 0);
    const interestEarned = mockMemberContributions.reduce((sum, member) => sum + member.expectedInterest, 0);
    const totalLoanAssets = mockMemberContributions.reduce((sum, member) => sum + (member.currentLoanBalance || 0), 0);

    console.log(`\nüìà Simulated Data:`);
    console.log(`  Members: ${mockMemberContributions.length}`);
    console.log(`  Total Collected: ‚Çπ${totalCollected}`);
    console.log(`  Interest Earned: ‚Çπ${interestEarned}`);
    console.log(`  Total Loan Assets: ‚Çπ${totalLoanAssets}`);

    // Calculate starting values
    const startingCashInHand = group.cashInHand || 0;
    const startingCashInBank = group.balanceInBank || 0;
    const startingGroupStanding = startingCashInHand + startingCashInBank + totalLoanAssets;

    console.log(`\nüî¢ Starting Values:`);
    console.log(`  Cash in Hand: ‚Çπ${startingCashInHand}`);
    console.log(`  Cash in Bank: ‚Çπ${startingCashInBank}`);
    console.log(`  Loan Assets: ‚Çπ${totalLoanAssets}`);
    console.log(`  Group Standing: ‚Çπ${startingGroupStanding}`);

    // OLD LOGIC (before fix)
    console.log(`\n‚ùå OLD LOGIC (Before Fix):`);
    const oldEndingCashInHand = startingCashInHand + totalCollected;
    const oldEndingCashInBank = startingCashInBank;
    const oldEndingGroupStanding = oldEndingCashInHand + oldEndingCashInBank + totalLoanAssets;

    console.log(`  Ending Cash in Hand: ‚Çπ${oldEndingCashInHand} (all collection added here)`);
    console.log(`  Ending Cash in Bank: ‚Çπ${oldEndingCashInBank} (no change)`);
    console.log(`  Ending Group Standing: ‚Çπ${oldEndingGroupStanding}`);

    // NEW LOGIC (after fix) - matches PeriodicRecordForm allocation
    console.log(`\n‚úÖ NEW LOGIC (After Fix - matches Track Contribution page):`);
    const bankAllocation = Math.round(totalCollected * 0.7); // 70% to bank
    const handAllocation = totalCollected - bankAllocation; // 30% to hand
    
    const newEndingCashInHand = startingCashInHand + handAllocation;
    const newEndingCashInBank = startingCashInBank + bankAllocation;
    const newEndingGroupStanding = newEndingCashInHand + newEndingCashInBank + totalLoanAssets;

    console.log(`  Collection Allocation:`);
    console.log(`    Total Collection: ‚Çπ${totalCollected}`);
    console.log(`    To Bank (70%): ‚Çπ${bankAllocation}`);
    console.log(`    To Hand (30%): ‚Çπ${handAllocation}`);
    console.log(`  Ending Cash in Hand: ‚Çπ${newEndingCashInHand}`);
    console.log(`  Ending Cash in Bank: ‚Çπ${newEndingCashInBank}`);
    console.log(`  Ending Group Standing: ‚Çπ${newEndingGroupStanding}`);

    console.log(`\nüéØ KEY DIFFERENCES:`);
    console.log(`  Cash in Hand difference: ‚Çπ${newEndingCashInHand - oldEndingCashInHand}`);
    console.log(`  Cash in Bank difference: ‚Çπ${newEndingCashInBank - oldEndingCashInBank}`);
    console.log(`  Group Standing difference: ‚Çπ${newEndingGroupStanding - oldEndingGroupStanding}`);

    if (newEndingGroupStanding === oldEndingGroupStanding) {
      console.log(`  ‚úÖ Total group standing remains the same (correct)`);
    } else {
      console.log(`  ‚ùå Total group standing changed (unexpected)`);
    }

    console.log(`\nüí° BENEFIT:`);
    console.log(`  The Close Period summary now shows the same cash allocation as the Track Contribution page.`);
    console.log(`  Cash is properly split between bank and hand instead of all going to hand.`);
    console.log(`  This provides consistent financial reporting across the application.`);

  } catch (error) {
    console.error('‚ùå Test failed:', error);
  } finally {
    await prisma.$disconnect();
  }
}

testClosePeriodSummaryFix();
