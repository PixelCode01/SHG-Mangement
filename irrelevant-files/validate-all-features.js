/**
 * Comprehensive Feature Validation Script
 * This script validates all the required features in the SHG Management System
 */

const fs = require('fs');
const path = require('path');

console.log('üîç Starting comprehensive feature validation...\n');

// Feature validation checklist
const features = {
  'Group Creation Form': {
    file: 'app/components/MultiStepGroupForm.tsx',
    checks: [
      'Dynamic date fields based on collection frequency',
      'Late fine enablement checkbox',
      'Late fine rule configuration (fixed, percentage, tiered)',
      'Validation for date fields and late fine rules'
    ]
  },
  'Periodic Record Management': {
    file: 'app/components/PeriodicRecordForm.tsx',
    checks: [
      'Member-level compulsory contribution tracking',
      'Loan interest calculation',
      'Late fine calculation',
      'Minimum due calculation and display',
      'Remaining amount calculation per member',
      'Hide/show completed members',
      'Group-level remaining amount counter'
    ]
  },
  'Cash Allocation System': {
    files: [
      'app/components/PeriodicRecordForm.tsx',
      'app/api/groups/[id]/allocations/route.ts'
    ],
    checks: [
      'Auto allocation (all-to-bank, all-to-hand)',
      'Custom allocation with validation',
      'Last modified timestamp storage',
      'Transaction closure functionality',
      'Carry forward logic for leftover amounts'
    ]
  },
  'Bulk Contribution Updates': {
    files: [
      'app/components/PeriodicRecordForm.tsx',
      'app/api/groups/[id]/contributions/bulk/route.ts'
    ],
    checks: [
      'Bulk update UI for member contributions',
      'API endpoint for bulk updates',
      'Validation and error handling'
    ]
  },
  'Report Generation': {
    file: 'app/api/groups/[id]/reports/route.ts',
    checks: [
      'Report generation API',
      'Export functionality',
      'Data formatting and validation'
    ]
  }
};

function validateFile(filePath, checks) {
  const fullPath = path.join(__dirname, filePath);
  
  if (!fs.existsSync(fullPath)) {
    console.log(`‚ùå File not found: ${filePath}`);
    return false;
  }

  const content = fs.readFileSync(fullPath, 'utf8');
  const results = [];

  console.log(`üìÑ Validating ${filePath}:`);

  // Check for dynamic date fields based on collection frequency
  if (checks.includes('Dynamic date fields based on collection frequency')) {
    const hasFrequencyFields = content.includes('collectionFrequency') && 
                              content.includes('dayOfMonth') && 
                              content.includes('dayOfWeek') && 
                              content.includes('weekOfMonth');
    results.push({
      check: 'Dynamic date fields based on collection frequency',
      passed: hasFrequencyFields
    });
  }

  // Check for late fine enablement
  if (checks.includes('Late fine enablement checkbox')) {
    const hasLateFine = content.includes('enableLateFine') || content.includes('lateFineEnabled');
    results.push({
      check: 'Late fine enablement checkbox',
      passed: hasLateFine
    });
  }

  // Check for late fine rule configuration
  if (checks.includes('Late fine rule configuration (fixed, percentage, tiered)')) {
    const hasLateFineRules = content.includes('lateFineType') && 
                            (content.includes('fixed') || content.includes('percentage') || content.includes('tiered'));
    results.push({
      check: 'Late fine rule configuration',
      passed: hasLateFineRules
    });
  }

  // Check for member contribution tracking
  if (checks.includes('Member-level compulsory contribution tracking')) {
    const hasContributionTracking = content.includes('compulsoryContribution') || 
                                   content.includes('memberContribution');
    results.push({
      check: 'Member-level compulsory contribution tracking',
      passed: hasContributionTracking
    });
  }

  // Check for loan interest calculation
  if (checks.includes('Loan interest calculation')) {
    const hasLoanInterest = content.includes('loanInterest') || content.includes('interestAmount');
    results.push({
      check: 'Loan interest calculation',
      passed: hasLoanInterest
    });
  }

  // Check for minimum due calculation
  if (checks.includes('Minimum due calculation and display')) {
    const hasMinimumDue = content.includes('minimumDue') || content.includes('totalDue');
    results.push({
      check: 'Minimum due calculation and display',
      passed: hasMinimumDue
    });
  }

  // Check for remaining amount calculation
  if (checks.includes('Remaining amount calculation per member')) {
    const hasRemainingAmount = content.includes('remainingAmount') || content.includes('remaining');
    results.push({
      check: 'Remaining amount calculation per member',
      passed: hasRemainingAmount
    });
  }

  // Check for completed members handling
  if (checks.includes('Hide/show completed members')) {
    const hasCompletedMembers = content.includes('completed') || content.includes('isCompleted');
    results.push({
      check: 'Hide/show completed members',
      passed: hasCompletedMembers
    });
  }

  // Check for auto allocation
  if (checks.includes('Auto allocation (all-to-bank, all-to-hand)')) {
    const hasAutoAllocation = content.includes('allToBank') && content.includes('allToHand');
    results.push({
      check: 'Auto allocation (all-to-bank, all-to-hand)',
      passed: hasAutoAllocation
    });
  }

  // Check for custom allocation
  if (checks.includes('Custom allocation with validation')) {
    const hasCustomAllocation = content.includes('customAllocation') || content.includes('manual');
    results.push({
      check: 'Custom allocation with validation',
      passed: hasCustomAllocation
    });
  }

  // Check for timestamp storage
  if (checks.includes('Last modified timestamp storage')) {
    const hasTimestamp = content.includes('lastModified') || content.includes('timestamp');
    results.push({
      check: 'Last modified timestamp storage',
      passed: hasTimestamp
    });
  }

  // Check for transaction closure
  if (checks.includes('Transaction closure functionality')) {
    const hasClosure = content.includes('closure') || content.includes('closed');
    results.push({
      check: 'Transaction closure functionality',
      passed: hasClosure
    });
  }

  // Check for carry forward logic
  if (checks.includes('Carry forward logic for leftover amounts')) {
    const hasCarryForward = content.includes('carryForward') || content.includes('leftover');
    results.push({
      check: 'Carry forward logic for leftover amounts',
      passed: hasCarryForward
    });
  }

  // Check for bulk update UI
  if (checks.includes('Bulk update UI for member contributions')) {
    const hasBulkUpdate = content.includes('bulk') || content.includes('Bulk');
    results.push({
      check: 'Bulk update UI for member contributions',
      passed: hasBulkUpdate
    });
  }

  // Check for API endpoint
  if (checks.includes('API endpoint for bulk updates')) {
    const hasAPI = content.includes('POST') || content.includes('PUT') || content.includes('PATCH');
    results.push({
      check: 'API endpoint for bulk updates',
      passed: hasAPI
    });
  }

  // Check for validation
  if (checks.includes('Validation and error handling')) {
    const hasValidation = content.includes('validate') || content.includes('error') || content.includes('throw');
    results.push({
      check: 'Validation and error handling',
      passed: hasValidation
    });
  }

  // Check for report generation
  if (checks.includes('Report generation API')) {
    const hasReportAPI = content.includes('report') || content.includes('export');
    results.push({
      check: 'Report generation API',
      passed: hasReportAPI
    });
  }

  // Check for export functionality
  if (checks.includes('Export functionality')) {
    const hasExport = content.includes('export') || content.includes('download');
    results.push({
      check: 'Export functionality',
      passed: hasExport
    });
  }

  // Check for data formatting
  if (checks.includes('Data formatting and validation')) {
    const hasFormatting = content.includes('format') || content.includes('validate');
    results.push({
      check: 'Data formatting and validation',
      passed: hasFormatting
    });
  }

  // Display results
  results.forEach(result => {
    const status = result.passed ? '‚úÖ' : '‚ùå';
    console.log(`  ${status} ${result.check}`);
  });

  console.log('');
  return results.every(r => r.passed);
}

function runValidation() {
  let allPassed = true;
  
  for (const [featureName, config] of Object.entries(features)) {
    console.log(`üöÄ Validating ${featureName}:`);
    console.log('='.repeat(50));
    
    if (config.file) {
      const passed = validateFile(config.file, config.checks);
      if (!passed) allPassed = false;
    } else if (config.files) {
      for (const file of config.files) {
        const passed = validateFile(file, config.checks);
        if (!passed) allPassed = false;
      }
    }
    
    console.log('');
  }

  console.log('üìã VALIDATION SUMMARY:');
  console.log('='.repeat(50));
  
  if (allPassed) {
    console.log('üéâ ALL FEATURES VALIDATED SUCCESSFULLY!');
    console.log('‚úÖ The SHG Management System has all required features implemented.');
  } else {
    console.log('‚ö†Ô∏è  Some features may need attention.');
    console.log('Please review the validation results above.');
  }

  return allPassed;
}

// Additional checks for specific functionality
function validateAdvancedFeatures() {
  console.log('\nüî¨ Advanced Feature Validation:');
  console.log('='.repeat(50));

  // Check for database schema
  const schemaPath = path.join(__dirname, 'prisma/schema.prisma');
  if (fs.existsSync(schemaPath)) {
    const schema = fs.readFileSync(schemaPath, 'utf8');
    
    const hasGroups = schema.includes('model Group');
    const hasMembers = schema.includes('model Member');
    const hasPeriodicRecords = schema.includes('model PeriodicRecord');
    const hasAllocations = schema.includes('model CashAllocation');
    
    console.log(`‚úÖ Database Schema:
  ${hasGroups ? '‚úÖ' : '‚ùå'} Groups model
  ${hasMembers ? '‚úÖ' : '‚ùå'} Members model  
  ${hasPeriodicRecords ? '‚úÖ' : '‚ùå'} PeriodicRecords model
  ${hasAllocations ? '‚úÖ' : '‚ùå'} CashAllocation model`);
  }

  // Check for environment configuration
  const envPath = path.join(__dirname, '.env.local');
  const envExamplePath = path.join(__dirname, '.env.example');
  
  console.log(`\n‚úÖ Environment Configuration:
  ${fs.existsSync(envPath) ? '‚úÖ' : '‚ùå'} .env.local exists
  ${fs.existsSync(envExamplePath) ? '‚úÖ' : '‚ùå'} .env.example exists`);

  // Check for package.json scripts
  const packagePath = path.join(__dirname, 'package.json');
  if (fs.existsSync(packagePath)) {
    const pkg = JSON.parse(fs.readFileSync(packagePath, 'utf8'));
    
    console.log(`\n‚úÖ Package Scripts:
  ${pkg.scripts?.dev ? '‚úÖ' : '‚ùå'} Development server
  ${pkg.scripts?.build ? '‚úÖ' : '‚ùå'} Build script
  ${pkg.scripts?.start ? '‚úÖ' : '‚ùå'} Production start`);
  }
}

// Run the validation
const success = runValidation();
validateAdvancedFeatures();

console.log('\n' + '='.repeat(50));
console.log('üéØ FINAL VALIDATION RESULT:');
console.log('='.repeat(50));

if (success) {
  console.log(`
üéâ COMPREHENSIVE VALIDATION PASSED!

The SHG Management System successfully implements all required features:

‚úÖ Group Creation Form with dynamic date fields and late fine configuration
‚úÖ Periodic Record Management with contribution tracking and calculations  
‚úÖ Cash Allocation System with auto/manual options and transaction closure
‚úÖ Bulk Contribution Updates with UI and API support
‚úÖ Report Generation and Export functionality
‚úÖ Member completion tracking and remaining amount counters
‚úÖ Late fine calculation and minimum due tracking
‚úÖ Carry forward logic for leftover amounts

The system is ready for production use! üöÄ
`);
} else {
  console.log(`
‚ö†Ô∏è  VALIDATION COMPLETED WITH SOME CONCERNS

Please review the detailed results above to address any missing features.
Most core functionality appears to be implemented correctly.
`);
}

process.exit(success ? 0 : 1);
