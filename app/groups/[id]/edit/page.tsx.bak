'use client';

import React, { useState, useEffect, use, ChangeEvent } from 'react';
import { useRouter } from 'next/navigation';
import Link from 'next/link';
import DatePicker from 'react-datepicker';
import 'react-datepicker/dist/react-datepicker.css';
import { useForm, Controller, useFieldArray } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';

interface EditGroupPageProps {
  params: Promise<{ id: string }>;
}

// Define the structure for member data including historical fields
interface MemberEditData {
  id: string; // Member's actual ID
  name: string;
  initialShareAmount: number | null;
  initialLoanAmount: number | null;
  initialInterest: number | null;
}

// Define the structure for the group data fetched
interface GroupEditData {
  id: string; // Group's actual ID
  name: string;
  address: string | null;
  registrationNumber: string | null;
  organization: string | null;
  leaderId: string | null;
  memberCount: number | null;
  dateOfStarting: string | null; // Comes as ISO string
  description: string | null;
  members: MemberEditData[]; // Array of members with historical data
}

// Schema for basic group info update
const groupInfoSchema = z.object({
  name: z.string().min(1, 'Group name is required'),
  address: z.string().optional().nullable(),
  registrationNumber: z.string().optional().nullable(),
  organization: z.enum(["JSK", "GOVT_JHARKHAND", "NGO", "OTHER"], {
    errorMap: () => ({ message: "Please select a valid organization type" })
  }).optional().nullable(),
  leaderId: z.string().min(1, 'Leader selection is required').nullable(), // Leader can be null initially if not set
  memberCount: z.number().int().min(1, 'Must be at least 1').optional().nullable(),
  dateOfStarting: z.date().max(new Date(), 'Date cannot be in the future').nullable(),
  description: z.string().optional().nullable(),
});

// Schema for the entire form including member historical data
const editFormSchema = groupInfoSchema.extend({
  members: z.array(z.object({
    id: z.string(), // Member ID
    name: z.string(), // For display
    initialShareAmount: z.number().nonnegative('Cannot be negative').nullable(),
    initialLoanAmount: z.number().nonnegative('Cannot be negative').nullable(),
    initialInterest: z.number().nonnegative('Cannot be negative').nullable(),
  }))
});

type EditFormValues = z.infer<typeof editFormSchema>;

export default function EditGroupPage({ params }: EditGroupPageProps) {
  const { id: groupId } = use(params); // Group ID from URL
  const router = useRouter();

  const [allMembers, setAllMembers] = useState<{ id: string; name: string }[]>([]); // For leader dropdown
  const [isLoading, setIsLoading] = useState(true);
  const [isSaving, setIsSaving] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [saveStatus, setSaveStatus] = useState<string | null>(null);

  const {
    register,
    control,
    handleSubmit,
    reset,
    setValue,
    formState: { errors, isDirty }, // Use isDirty to track changes
  } = useForm<EditFormValues>({
    resolver: zodResolver(editFormSchema),
    defaultValues: {
      name: '',
      address: null,
      registrationNumber: null,
      organization: null,
      leaderId: null,
      memberCount: null,
      dateOfStarting: null,
      description: null,
      members: [],
    },
  });

  // useFieldArray for managing the members array in the form state
  const { fields: memberFields, update } = useFieldArray({
    control,
    name: "members",
    keyName: "fieldId" // Use a different key name than default 'id'
  });

  // Fetch initial group data and all members list
  useEffect(() => {
    const fetchData = async () => {
      setIsLoading(true);
      setError(null);
      try {
        const [groupResponse, membersResponse] = await Promise.all([
          fetch(`/api/groups/${groupId}`),
          fetch('/api/members'), // Fetch all members for the leader dropdown
        ]);

        if (!groupResponse.ok) {
          if (groupResponse.status === 404) {
            setError('Group not found.');
            return; // Stop if group not found
          }
          throw new Error('Failed to fetch group details');
        }
        if (!membersResponse.ok) {
          throw new Error('Failed to fetch members list');
        }

        const groupData: GroupEditData = await groupResponse.json();
        const allMembersData = await membersResponse.json();

        setAllMembers(allMembersData.map((m: any) => ({ id: m.id, name: m.name })));

        // Reset the form with fetched data
        reset({
          name: groupData.name,
          address: groupData.address,
          registrationNumber: groupData.registrationNumber,
          organization: groupData.organization as EditFormValues['organization'], // Cast to the correct type
          leaderId: groupData.leaderId,
          memberCount: groupData.memberCount,
          dateOfStarting: groupData.dateOfStarting ? new Date(groupData.dateOfStarting) : null,
          description: groupData.description,
          members: groupData.members.map(m => ({ // Map members data for the form
            id: m.id,
            name: m.name,
            initialShareAmount: m.initialShareAmount,
            initialLoanAmount: m.initialLoanAmount,
            initialInterest: m.initialInterest,
          })),
        });

      } catch (err: any) {
        console.error('Error fetching data:', err);
        setError(err.message || 'Failed to load data. Please try again later.');
      } finally {
        setIsLoading(false);
      }
    };

    fetchData();
  }, [groupId, reset]); // Add reset to dependency array

  // Handle form submission
  const handleSaveChanges = async (data: EditFormValues) => {
    setIsSaving(true);
    setError(null);
    setSaveStatus(null);
    let groupUpdateSuccess = false;
    let memberUpdateCount = 0;
    const memberUpdateErrors: string[] = [];

    try {
      // 1. Update Group Info
      const groupPayload = {
        name: data.name,
        address: data.address,
        registrationNumber: data.registrationNumber,
        organization: data.organization,
        leaderId: data.leaderId,
        memberCount: data.memberCount,
        dateOfStarting: data.dateOfStarting?.toISOString(),
        description: data.description,
      };

      const groupResponse = await fetch(`/api/groups/${groupId}`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(groupPayload),
      });

      if (!groupResponse.ok) {
        const errorData = await groupResponse.json();
        throw new Error(`Failed to update group info: ${errorData.error || 'Unknown error'}`);
      }
      groupUpdateSuccess = true;

      // 2. Update Member Historical Data (Iterate through members in the form)
      for (const member of data.members) {
        const memberPayload = {
          initialShareAmount: member.initialShareAmount,
          initialLoanAmount: member.initialLoanAmount,
          initialInterest: member.initialInterest,
        };

        // Only send update if data is present
        if (memberPayload.initialShareAmount !== null || memberPayload.initialLoanAmount !== null || memberPayload.initialInterest !== null) {
            try {
                const memberResponse = await fetch(`/api/groups/${groupId}/members/${member.id}`, {
                    method: 'PUT',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(memberPayload),
                });

                if (!memberResponse.ok) {
                    const errorData = await memberResponse.json();
                    memberUpdateErrors.push(`Member ${member.name}: ${errorData.error || 'Update failed'}`);
                } else {
                    memberUpdateCount++;
                }
            } catch (memberErr: any) {
                 memberUpdateErrors.push(`Member ${member.name}: ${memberErr.message || 'Network error'}`);
            }
        }
      }

      // Set status based on results
      let finalStatus = 'Group info updated successfully.';
      if (memberUpdateCount > 0) {
        finalStatus += ` Historical data updated for ${memberUpdateCount} member(s).`;
      }
      if (memberUpdateErrors.length > 0) {
        finalStatus += ` Errors occurred for ${memberUpdateErrors.length} member(s).`;
        setError(`Partial success. Member update errors: ${memberUpdateErrors.join('; ')}`);
      }
      setSaveStatus(finalStatus);
      // Optionally reset dirty state after successful save
      // reset({}, { keepValues: true }); // Resets dirty state but keeps current values

    } catch (err: any) {
      console.error('Error saving changes:', err);
      setError(err.message || 'An error occurred while saving.');
      setSaveStatus(null);
    } finally {
      setIsSaving(false);
    }
  };

  // --- Render Logic ---

  if (isLoading) {
    return (
      <div className="max-w-4xl mx-auto py-8 px-4 sm:px-6 lg:px-8 text-center">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500 mx-auto"></div>
        <p className="mt-4 text-gray-500">Loading group data...</p>
      </div>
    );
  }

  if (error && !isLoading) { // Show error only if not loading
    return (
      <div className="max-w-4xl mx-auto py-8 px-4 sm:px-6 lg:px-8">
        <div className="bg-red-50 p-4 rounded-md border border-red-200">
          <p className="text-red-600 font-medium">Error</p>
          <p className="text-red-500 mt-1">{error}</p>
          <Link href="/groups" className="mt-4 inline-block text-sm text-blue-600 hover:underline">
            Back to Groups List
          </Link>
        </div>
      </div>
    );
  }

  // Check if memberFields are populated (data has been loaded into the form state)
  if (memberFields.length === 0 && !isLoading) {
     // This might indicate the group was found but had no members, or data loading failed silently
     // Let's assume it means no members for now.
  }


  return (
    <div className="max-w-4xl mx-auto py-8 px-4 sm:px-6 lg:px-8">
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-2xl font-bold text-gray-900">Edit Group</h1>
        <Link href={`/groups/${groupId}`} className="text-sm text-blue-600 hover:underline">
          Cancel and View Group
        </Link>
      </div>

      {saveStatus && (
        <div className={`p-4 mb-6 rounded-md border ${error ? 'bg-yellow-50 border-yellow-200 text-yellow-800' : 'bg-green-50 border-green-200 text-green-800'}`}>
          {saveStatus}
          {error && <p className="mt-1 text-sm">{error}</p>}
        </div>
      )}
      {!saveStatus && error && ( // Show general errors if saveStatus isn't set
         <div className="p-4 mb-6 rounded-md border bg-red-50 border-red-200 text-red-800">
           {error}
         </div>
      )}


      <form onSubmit={handleSubmit(handleSaveChanges)} className="space-y-8">
        {/* Section 1: Basic Group Information */}
        <div className="card p-6">
          <h2 className="text-lg font-medium text-gray-900 dark:text-gray-100 mb-4">Group Details</h2>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
              <label htmlFor="name" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                Group Name <span className="text-red-500">*</span>
              </label>
              <input
                type="text"
                id="name"
                {...register("name")}
                className="mt-1 block w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm disabled:opacity-50"
                disabled={isSaving}
              />
              {errors.name && (
                <p className="mt-1 text-sm text-red-600">{errors.name.message}</p>
              )}
            </div>

            <div>
              <label htmlFor="address" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                Address
              </label>
              <input
                type="text"
                id="address"
                {...register("address")}
                className="mt-1 block w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm disabled:opacity-50"
                disabled={isSaving}
              />
              {errors.address && (
                <p className="mt-1 text-sm text-red-600">{errors.address.message}</p>
              )}
            </div>

            <div>
              <label htmlFor="registrationNumber" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                Registration Number
              </label>
              <input
                type="text"
                id="registrationNumber"
                {...register("registrationNumber")}
                className="mt-1 block w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm disabled:opacity-50"
                disabled={isSaving}
              />
              {errors.registrationNumber && (
                <p className="mt-1 text-sm text-red-600">{errors.registrationNumber.message}</p>
              )}
            </div>
            
            <div>
              <label htmlFor="organization" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                Organization
              </label>
              <select
                id="organization"
                {...register("organization")}
                className="mt-1 block w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm disabled:opacity-50"
                disabled={isSaving}
              >
                <option value="">Select Organization</option>
                <option value="JSK">JSK</option>
                <option value="GOVT_JHARKHAND">GOVT_JHARKHAND</option>
                <option value="NGO">NGO</option>
                <option value="OTHER">OTHER</option>
              </select>
              {errors.organization && (
                <p className="mt-1 text-sm text-red-600">{errors.organization.message}</p>
              )}
            </div>

            <div>
              <label htmlFor="leaderId" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                Group Leader
              </label>
              <select
                id="leaderId"
                {...register("leaderId")}
                className="mt-1 block w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm disabled:opacity-50"
                disabled={isSaving || isLoading || allMembers.length === 0}
              >
                <option value="">Select Leader</option>
                {allMembers.map((member) => (
                  <option key={member.id} value={member.id}>
                    {member.name}
                  </option>
                ))}
              </select>
              {errors.leaderId && (
                <p className="mt-1 text-sm text-red-600">{errors.leaderId.message}</p>
              )}
            </div>

            <div>
              <label htmlFor="memberCount" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                Member Count
              </label>
              <input
                type="number"
                id="memberCount"
                {...register("memberCount", { valueAsNumber: true })}
                className="mt-1 block w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm disabled:opacity-50"
                disabled={isSaving}
              />
              {errors.memberCount && (
                <p className="mt-1 text-sm text-red-600">{errors.memberCount.message}</p>
              )}
            </div>

            <div className="md:col-span-2">
              <label htmlFor="dateOfStarting" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                Date of Starting
              </label>
              <Controller
                control={control}
                name="dateOfStarting"
                render={({ field }) => (
                  <DatePicker
                    selected={field.value}
                    onChange={(date) => field.onChange(date)}
                    dateFormat="MMMM d, yyyy"
                    className="mt-1 block w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm disabled:opacity-50"
                    placeholderText="Select date"
                    disabled={isSaving}
                    maxDate={new Date()}
                  />
                )}
              />
              {errors.dateOfStarting && (
                <p className="mt-1 text-sm text-red-600">{errors.dateOfStarting.message}</p>
              )}
            </div>

            <div className="md:col-span-2">
              <label htmlFor="description" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                Description
              </label>
              <textarea
                id="description"
                {...register("description")}
                rows={3}
                className="mt-1 block w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm disabled:opacity-50"
                disabled={isSaving}
              />
              {errors.description && (
                <p className="mt-1 text-sm text-red-600">{errors.description.message}</p>
              )}
            </div>
          </div>
        </div>

        {/* Section 2: Member Historical Data */}
        <div className="card p-6">
          <h2 className="text-lg font-medium text-gray-900 dark:text-gray-100 mb-4">Member Historical Data</h2>
          {memberFields.length === 0 ? (
             <p className="text-sm text-gray-500">No members found in this group.</p>
          ) : (
            <div className="space-y-4">
              {memberFields.map((member, index) => (
                <div key={member.fieldId} className="border rounded-md p-4 bg-background dark:border-gray-700">
                  <h3 className="font-medium text-foreground mb-3">{member.name}</h3>
                  <div className="grid grid-cols-1 sm:grid-cols-3 gap-4">
                    {/* Initial Share Amount */}
                    <div>
                      <label htmlFor={`members.${index}.initialShareAmount`} className="block text-xs font-medium text-muted mb-1">Initial Share Amt</label>
                      <Controller
                        name={`members.${index}.initialShareAmount`}
                        control={control}
                        render={({ field }) => (
                          <input
                            type="number"
                            step="0.01"
                            min="0"
                            {...field}
                            value={field.value ?? ''}
                            onChange={e => field.onChange(e.target.value === '' ? null : parseFloat(e.target.value))}
                            className="input-field text-sm"
                            placeholder="0.00"
                            disabled={isSaving}
                          />
                        )}
                      />
                      {errors.members?.[index]?.initialShareAmount && (
                        <p className="mt-1 text-xs text-red-600">{errors.members[index]?.initialShareAmount?.message}</p>
                      )}
                    </div>
                    {/* Initial Loan Amount */}
                    <div>
                      <label htmlFor={`members.${index}.initialLoanAmount`} className="block text-xs font-medium text-muted mb-1">Initial Loan Amt</label>
                      <Controller
                        name={`members.${index}.initialLoanAmount`}
                        control={control}
                        render={({ field }) => (
                          <input
                            type="number"
                            step="0.01"
                            min="0"
                            {...field}
                            value={field.value ?? ''}
                            onChange={e => field.onChange(e.target.value === '' ? null : parseFloat(e.target.value))}
                            className="input-field text-sm"
                            placeholder="0.00"
                            disabled={isSaving}
                          />
                        )}
                      />
                      {errors.members?.[index]?.initialLoanAmount && (
                        <p className="mt-1 text-xs text-red-600">{errors.members[index]?.initialLoanAmount?.message}</p>
                      )}
                    </div>
                    {/* Initial Interest */}
                    <div>
                      <label htmlFor={`members.${index}.initialInterest`} className="block text-xs font-medium text-muted mb-1">Initial Interest Paid</label>
                      <Controller
                        name={`members.${index}.initialInterest`}
                        control={control}
                        render={({ field }) => (
                          <input
                            type="number"
                            step="0.01"
                            min="0"
                            {...field}
                            value={field.value ?? ''}
                            onChange={e => field.onChange(e.target.value === '' ? null : parseFloat(e.target.value))}
                            className="input-field text-sm"
                            placeholder="0.00"
                            disabled={isSaving}
                          />
                        )}
                      />
                      {errors.members?.[index]?.initialInterest && (
                        <p className="mt-1 text-xs text-red-600">{errors.members[index]?.initialInterest?.message}</p>
                      )}
                    </div>
                  </div>
                </div>
              ))}
            </div>
          )}
        </div>

        {/* Save Button */}
        <div className="flex justify-end pt-4 border-t">
          <button
            type="submit"
            className="px-6 py-2 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed"
            disabled={isSaving || isLoading || !isDirty} // Disable if saving, loading, or no changes made
          >
            {isSaving ? 'Saving...' : 'Save Changes'}
          </button>
        </div>
      </form>
    </div>
  );
}